package GUI;

import javax.swing.*;
import java.awt.*;
import java.util.*;
import java.util.List;

public class GanttChartPanel extends JPanel {
    private List<ExecutionSegment> timeline = new ArrayList<>();

    private final int timeUnitWidth = 40;   // عرض وحدة زمنية واحدة
    private final int rowHeight      = 30;  // ارتفاع صف العملية
    private final int padding        = 50;  // هامش للأرقام والمحاور

    public GanttChartPanel() {
        setPreferredSize(new Dimension(800, 400));
    }

    /** يستقبل مقاطع التنفيذ المُحوّلة إلى نوع الـ GanttChartPanel.ExecutionSegment */
    public void setTimeline(List<ExecutionSegment> timeline) {
        this.timeline = new ArrayList<>(timeline);
    }

    /** يمسح أي بيانات سابقة قبل رسم جديد */
    public void clear() {
        this.timeline.clear();
        repaint();
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        if (timeline.isEmpty()) {
            g.drawString("No execution segments to display.", padding, padding);
            return;
        }

        Graphics2D g2 = (Graphics2D) g;
        g2.setStroke(new BasicStroke(1.5f));

        // جمع كل الـ PIDs وتحديد صف لكل واحد
        List<Integer> pids = timeline.stream()
                .map(seg -> seg.pid)
                .distinct()
                .sorted()
                .toList();
        Map<Integer,Integer> pidToRow = new HashMap<>();
        for (int i = 0; i < pids.size(); i++) pidToRow.put(pids.get(i), i);

        // رسم محاور الزمن الأفقية
        int maxTime = timeline.stream().mapToInt(seg -> seg.end).max().orElse(0);
        for (int t = 0; t <= maxTime; t++) {
            int x = padding + t * timeUnitWidth;
            g2.drawLine(x, padding - 5, x, padding + rowHeight * pids.size());
            g2.drawString(String.valueOf(t), x - 3, padding - 10);
        }

        // رسم كل ExecutionSegment
        for (ExecutionSegment seg : timeline) {
            int row = pidToRow.get(seg.pid);
            int x   = padding + seg.start * timeUnitWidth;
            int y   = padding + row * rowHeight;
            int w   = (seg.end - seg.start) * timeUnitWidth;
            int h   = rowHeight - 5;

            g2.setColor(getColorForPid(seg.pid));
            g2.fillRect(x, y, w, h);

            g2.setColor(Color.BLACK);
            g2.drawRect(x, y, w, h);

            g2.drawString("P" + seg.pid, x + 5, y + h/2 + 5);
        }

        // أسماء العمليات على المحور الرأسي
        for (int pid : pids) {
            int row = pidToRow.get(pid);
            int y   = padding + row * rowHeight + rowHeight/2 + 5;
            g2.drawString("P" + pid, 5, y);
        }
    }

    private Color getColorForPid(int pid) {
        switch (pid % 6) {
            case 0: return new Color(0x8BC34A);
            case 1: return new Color(0x03A9F4);
            case 2: return new Color(0xFFC107);
            case 3: return new Color(0xE91E63);
            case 4: return new Color(0x9C27B0);
            default:return new Color(0xFF5722);
        }
    }

    public static class ExecutionSegment {
        public final int pid, start, end;
        public ExecutionSegment(int pid, int start, int end) {
            this.pid   = pid;
            this.start = start;
            this.end   = end;
        }
    }
}
