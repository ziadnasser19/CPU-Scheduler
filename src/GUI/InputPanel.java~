package GUI;

import Models.ProcessManager;
import Models.Process;
import Algorithms.*;

import javax.swing.*;
import java.awt.*;

public class InputPanel extends JPanel {
    private final ProcessManager manager;
    private final ReadyQueuePanel readyPanel;
    private final ResultPanel resultPanel;
    private final GanttChartPanel ganttPanel;
    private final AveragePanel averagePanel;

    private final JLabel pidLabel, burstLabel, priorityLabel, arrivalLabel, algoLabel, quantumLabel;
    private final JTextField burstField, priorityField, arrivalField, quantumField;
    private final JComboBox<String> algorithmBox;
    private final JButton addButton, startButton, clearAllButton;

    public InputPanel(ProcessManager manager,
                      ReadyQueuePanel readyPanel,
                      ResultPanel resultPanel,
                      GanttChartPanel ganttPanel,
                      AveragePanel averagePanel) {
        this.manager = manager;
        this.readyPanel = readyPanel;
        this.resultPanel = resultPanel;
        this.ganttPanel = ganttPanel;
        this.averagePanel = averagePanel;

        setBorder(BorderFactory.createTitledBorder("Input & Controls"));
        setLayout(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(3, 6, 3, 6);
        gbc.anchor = GridBagConstraints.WEST;

        // Labels
        pidLabel      = new JLabel("Process #: " + manager.nextPID());
        burstLabel    = new JLabel("Burst Time:");
        priorityLabel = new JLabel("Priority:");
        arrivalLabel  = new JLabel("Arrival Time:");
        algoLabel     = new JLabel("Algorithm:");
        quantumLabel  = new JLabel("Time Quantum (RR):");

        // Fields
        burstField    = new JTextField(6);
        priorityField = new JTextField(4);
        arrivalField  = new JTextField(4);
        quantumField  = new JTextField(4);

        algorithmBox = new JComboBox<>(new String[]{
                "FCFS", "SJF Non-Preemptive", "SJF Preemptive",
                "Priority Non-Preemptive", "Priority Preemptive", "Round Robin"
        });

        addButton      = new JButton("Add Process");
        startButton    = new JButton("Start Scheduling");
        clearAllButton = new JButton("Clear All");

        // Row 0: PID
        gbc.gridx = 0; gbc.gridy = 0; add(pidLabel, gbc);

        // Row 1: Burst & Priority
        gbc.gridy = 1;
        gbc.gridx = 0; add(burstLabel, gbc);
        gbc.gridx = 1; add(burstField, gbc);
        gbc.gridx = 2; add(priorityLabel, gbc);
        gbc.gridx = 3; add(priorityField, gbc);

        // Row 1: Arrival (only for preemptive & RR)
        gbc.gridx = 4; add(arrivalLabel, gbc);
        gbc.gridx = 5; add(arrivalField, gbc);

        // Row 2: Algorithm & Quantum
        gbc.gridy = 2;
        gbc.gridx = 0; add(algoLabel, gbc);
        gbc.gridx = 1; add(algorithmBox, gbc);
        gbc.gridx = 2; add(quantumLabel, gbc);
        gbc.gridx = 3; add(quantumField, gbc);

        // Row 3: Buttons
        gbc.gridy = 3;
        gbc.gridx = 0; add(addButton, gbc);
        gbc.gridx = 1; add(startButton, gbc);
        gbc.gridx = 2; add(clearAllButton, gbc);

        // Initial visibility
        toggleQuantumVisibility();
        toggleArrivalVisibility();

        // Listeners
        algorithmBox.addActionListener(e -> {
            toggleQuantumVisibility();
            toggleArrivalVisibility();
        });
        addButton.addActionListener(e -> onAdd());
        startButton.addActionListener(e -> onStart());
        clearAllButton.addActionListener(e -> onClearAll());
    }

    private void toggleQuantumVisibility() {
        boolean isRR = algorithmBox.getSelectedItem().equals("Round Robin");
        quantumLabel.setVisible(isRR);
        quantumField.setVisible(isRR);
    }

    private void toggleArrivalVisibility() {
        String algo = (String) algorithmBox.getSelectedItem();
        boolean show = algo.equals("SJF Preemptive")
                || algo.equals("Priority Preemptive")
                || algo.equals("Round Robin");
        arrivalLabel.setVisible(show);
        arrivalField.setVisible(show);
    }

    private void onAdd() {
        try {
            int burst   = Integer.parseInt(burstField.getText().trim());
            int prio    = Integer.parseInt(priorityField.getText().trim());
            int arrival = arrivalField.isVisible()
                    ? Integer.parseInt(arrivalField.getText().trim())
                    : 0;
            manager.createProcess(burst, prio, arrival);
            pidLabel.setText("Process #: " + manager.nextPID());
            refreshReadyQueue();
            burstField.setText(""); priorityField.setText(""); arrivalField.setText("");
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this,
                    "Enter valid integers.", "Input Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void onStart() {
        resultPanel.clear();
        ganttPanel.clear();
        averagePanel.clearAverages();

        SchedulingAlgorithm scheduler;
        String algo = (String) algorithmBox.getSelectedItem();
        int quantum = 0;
        if (algo.equals("Round Robin")) {
            try { quantum = Integer.parseInt(quantumField.getText().trim()); }
            catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(this,
                        "Enter valid quantum.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            scheduler = new RoundRobin(quantum, manager);
        } else if (algo.equals("FCFS")) scheduler = new FCFS(manager);
        else if (algo.equals("SJF Non-Preemptive")) scheduler = new SJFNonPreemptive(manager);
        else if (algo.equals("SJF Preemptive")) scheduler = new SJFPreemptive(manager);
        else if (algo.equals("Priority Non-Preemptive")) scheduler = new PriorityNonPreemptive(manager);
        else scheduler = new PriorityPreemptive(manager);

        scheduler.schedule();
        manager.getFinishedQueue().forEach(p -> resultPanel.addRow(p));

        if (scheduler instanceof RoundRobin) {
            ganttPanel.setTimeline(((RoundRobin) scheduler).timeline);
        } else {
            ganttPanel.setByFinished(manager.getFinishedQueue());
        }
        ganttPanel.repaint();

        int total = manager.getFinishedQueue().size();
        double avgWait = manager.getFinishedQueue().stream()
                .mapToInt(Process::getWaitingTime).average().orElse(0);
        double avgTurn = manager.getFinishedQueue().stream()
                .mapToInt(Process::getTurnAroundTime).average().orElse(0);
        double avgResp = manager.getFinishedQueue().stream()
                .mapToInt(Process::getResponseTime).average().orElse(0);
        averagePanel.updateAverages(avgWait, avgTurn, avgResp);
    }

    private void onClearAll() {
        manager.resetAll();
        pidLabel.setText("Process #: " + manager.nextPID());
        readyPanel.clear();
        resultPanel.clear();
        ganttPanel.clear();
        averagePanel.clearAverages();
    }

    private void refreshReadyQueue() {
        readyPanel.clear();
        manager.getReadyQueue().forEach(readyPanel::addRow);
    }
}
